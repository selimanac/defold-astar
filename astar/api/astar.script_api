- name: astar
  type: table
  desc: A* Path Finding
  members:
    - name: new_map_id
      desc: Get a new self-incrementing map_id.
      type: function
      returns:
        - name: map_id
          type: number
          desc: ID of a new map.
    - name: delete_map
      desc: Delete a map by its ID. This will free the memory used by the map.
      type: function
      parameters:
        - name: map_id
          type: number
          desc: ID of the map to delete. Has to be an integer from 0 to 2^16 - 1.
    - name: setup
      desc: Initial setup. You have to setup the astar before calling any other methods.
      type: function
      parameters:
        - name: map_width
          type: number
          desc: Width of your map. This is generally width of your tilemap.
        - name: map_height
          type: number
          desc: Height of your map. This is generally width of your tilemap.
        - name: direction
          type: number
          desc: Movement direction (astar.DIRECTION_FOUR or astar.DIRECTION_EIGHT)

            `astar.DIRECTION_FOUR` - on a square grid that allows 4 directions of movement using Manhattan distance.

            `astar.DIRECTION_EIGHT` - on a square grid that allows 8 directions of movement using Euclidean distance.
        - name: allocate
          type: number
          desc:
            How many states should be internally allocated at a time. This can be hard to get correct. The higher the value, the more memory Patfinder will use.

            - If you have a small map (a few thousand states?) it may make sense to pass in the maximum value. This will cache everything, and MicroPather will only need one main memory allocation. For a chess board, allocate  would be set to 8x8 (64)

            - If your map is large, something like 1/4 the number of possible states is good.

            - If your state space is huge, use a multiple (5-10x) of the normal path. "Occasionally" call `astar.reset_cache()` to free unused memory.
        - name: typical_adjacent
          type: number
          desc: Used to determine cache size. The typical number of adjacent states to a given state. (On a chessboard, 8.) Higher values use a little more memory.
        - name: cache[optional]
          type: boolean
          desc: Turn on path caching. Uses more memory (yet again) but at a huge speed advantage if you may call the pather with the same path or sub-path, which is common for pathing over maps in games.  Default is `true`
        - name: use_zero[optional]
          type: boolean
          desc: Toggle start index 0 or 1 for tables and tile positions. Also you can set it by call `astar.use_zero()`.  Default is `false`

        - name: map_vflip[optional]
          type: boolean
          desc: Flips the map vertically. This doesn't flip the coordinates. Also you can set it by call `astar.map_vflip()`. Default is `false`
        - name: map_id[optional]
          type: number
          desc: ID of the map. Has to be an integer from 0 to 2^16 - 1. Default is `0`.
      examples:
        - desc: |-
            ```lua

            local map_width = 5
            local map_height = 4
            local direction = astar.DIRECTION_EIGHT
            local allocate = map_width * map_height
            local typical_adjacent = 8
            local cache = true     -- Optional. Default is true
            local flip_map = false -- Optional. Default is false

            astar.setup("my_map", map_width, map_height, direction, allocate, typical_adjacent, cache, flip_map)

            ```
    - name: use_zero
      desc: Toggle start index 0 or 1 for tables and tile positions.

        If set to `false`, [astar.solve](#astarsolvestart_x-start_y-end_x-end_y), [astar.solve_near](#astarsolve_nearstart_x-start_y-max_cost), [astar.get_at](#astarget_atx-y), [astar.set_at](#astarset_atx-y-value) methods expect positions start with 1 and returns table indexes from **1**.

        Default is `false` = 1

      parameters:
        - name: toggle
          type: boolean
          desc: true/false
        - name: map_id[optional]
          type: number
          desc: ID of the map. Has to be an integer from 0 to 2^16 - 1. Default is `0`.

    - name: set_map
      desc: Set your map data.

        * Setting new map data reset the current cache.
      type: function
      parameters:
        - name: world
          type: table
          desc: Your tilemap data. Keep it simple as much as you can.
        - name: map_id[optional]
          type: number
          desc: ID of the map. Has to be an integer from 0 to 2^16 - 1. Default is `0`.

    - name: set_costs
      desc: Set costs for walkable tiles on your `world` table. This table keys determine the walkable area.

        Table's sum must be the `astar.DIRECTION_FOUR` or `astar.DIRECTION_EIGHT`.
      type: function
      parameters:
        - name: costs
          type: table
          desc: Table of costs for directions.
        - name: map_id[optional]
          type: number
          desc: ID of the map. Has to be an integer from 0 to 2^16 - 1. Default is `0`.

    - name: solve
      desc: Solves the path.
      type: function
      parameters:
        - name: start_x
          type: number
          desc: Start tile X.
        - name: start_y
          type: number
          desc: Start tile Y.
        - name: end_x
          type: number
          desc: End tile X.
        - name: end_y
          type: number
          desc: End tile Y.
        - name: map_id[optional]
          type: number
          desc: ID of the map. Has to be an integer from 0 to 2^16 - 1. Default is `0`.
      returns:
        - name: result
          type: number
          desc: Result code (`astar.SOLVED`, `astar.NO_SOLUTION`, `astar.START_END_SAME`).
        - name: size
          type: number
          desc: Size of the path.
        - name: total_cost
          type: number
          desc: Total cost of the path.
        - name: path
          type: table
          desc: Table with x and y coordinates. First value is the given start point.

    - name: solve_near
      desc: Finds the neighbours according to a given cost.
      type: function
      parameters:
        - name: start_x
          type: number
          desc: Start tile X.
        - name: start_y
          type: number
          desc: Start tile Y.
        - name: max_cost
          type: number
          desc: Maximum cost for finding neighbours.
        - name: map_id[optional]
          type: number
          desc: ID of the map. Has to be an integer from 0 to 2^16 - 1. Default is `0`.
      returns:
        - name: near_result
          type: number
          desc: Result code (`astar.SOLVED`, `astar.NO_SOLUTION`, `astar.START_END_SAME`).
        - name: near_size
          type: number
          desc: Size of the found neighbours.
        - name: nears
          type: table
          desc: Table with x and y coordinates. First value is the given start point.

    - name: reset_cache
      desc: If your state space is huge, occasionally call `astar.reset_cache()` to free unused memory.
      type: function
      parameters:
        - name: map_id[optional]
          type: number
          desc: ID of the map. Has to be an integer from 0 to 2^16 - 1. Default is `0`.
    - name: get_at
      desc: Returns the value from the map array by coordinates.
      type: function
      parameters:
        - name: x
          type: number
          desc: Tile X.
        - name: y
          type: number
          desc: Tile Y.
        - name: map_id[optional]
          type: number
          desc: ID of the map. Has to be an integer from 0 to 2^16 - 1. Default is `0`.
      returns:
        - name: value
          type: number
          desc: The value at the specified coordinates.

    - name: set_at
      desc: Set your value to the map array by coordinates.
      type: function
      parameters:
        - name: x
          type: number
          desc: Tile X.
        - name: y
          type: number
          desc: Tile Y.
        - name: value
          type: number
          desc: The value to set.
        - name: map_id[optional]
          type: number
          desc: ID of the map. Has to be an integer from 0 to 2^16 - 1. Default is `0`.

    - name: SOLVED
      type: number
      desc: Represents a solved path result.

    - name: NO_SOLUTION
      type: number
      desc: Represents a result where no path is found.

    - name: START_END_SAME
      type: number
      desc: Represents a result where the start and end points are the same.

    - name: DIRECTION_FOUR
      type: number
      desc: Represents the four-direction movement option.

    - name: DIRECTION_EIGHT
      type: number
      desc: Represents the eight-direction movement option.
